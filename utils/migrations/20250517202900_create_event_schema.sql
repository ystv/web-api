-- +goose Up

CREATE SCHEMA IF NOT EXISTS event;

create table event.events
(
    event_id     integer generated by default as identity
        primary key,
    event_type   text                     default 'other'::text not null
        constraint typechk
            check (event_type = ANY (ARRAY ['show'::text, 'meeting'::text, 'social'::text, 'other'::text])),
    name         text                                           not null
        constraint namechk
            check (char_length(name) <= 100),
    start_date   timestamp with time zone                       not null,
    end_date     timestamp with time zone                       not null,
    description  text                     default ''::text      not null,
    location     text                     default ''::text      not null
        constraint locationchk
            check (char_length(location) <= 100),
    is_private   boolean                  default false         not null,
    is_cancelled boolean                  default false         not null,
    is_tentative boolean                  default false         not null,
    created_at   timestamp with time zone default now()         not null,
    created_by   integer
        references people.users,
    updated_at   timestamp with time zone,
    updated_by   integer
        references people.users,
    deleted_at   timestamp with time zone,
    deleted_by   integer
        references people.users
);

comment on column event.events.event_type is 'Can be show, meeting, social, other';

create table event.signup_sheets
(
    signup_id    integer generated by default as identity
        primary key,
    event_id     integer
        references event.events
            on delete cascade,
    title        text                  not null
        constraint titlechk
            check (char_length(title) <= 50),
    description  text default ''::text not null,
    unlock_date  timestamp with time zone,
    arrival_time timestamp with time zone,
    start_time   timestamp with time zone,
    end_time     timestamp with time zone
);

create table event.position_groups
(
    group_id       integer generated by default as identity
        primary key,
    name           text not null,
    description    text not null,
    primary_colour text not null,
    leader         integer
                        references people.users
                            on update cascade on delete set null
);

comment on table event.position_groups is 'represents the organisational group a position is part of';

comment on column event.position_groups.primary_colour is 'A hex colour code that is used for styling components';

comment on column event.position_groups.leader is 'The point of contact to go about training and expertise regarding
the positions that are part of the group';

create table event.positions
(
    position_id       integer generated by default as identity
        primary key,
    group_id          integer                  not null
        references event.position_groups
            on update cascade,
    permission_id     integer
        references people.permissions,
    name              text                     not null
        constraint namechk
            check (char_length(name) <= 40),
    admin             boolean default false    not null,
    brief_description text    default ''::text not null,
    full_description  text                     not null,
    image             text                     not null,
    training_url      text                     not null
);

comment on column event.positions.admin is 'Whoever has this permission will have admin privileges over the event';

comment on column event.positions.full_description is 'This goes into a lot more detail in comparision to the brief discription
and would be displayed on it''s own dedicated page';

comment on column event.positions.training_url is 'Will be a URL to its wiki page / training video but displayed as a button to the user';

create table event.crews
(
    crew_id     integer generated by default as identity
        primary key,
    signup_id   integer
        references event.signup_sheets
            on update cascade on delete cascade,
    position_id integer
        references event.positions
            on update cascade on delete cascade,
    user_id     integer
        references people.users
            on update cascade on delete cascade,
    credited    boolean default true  not null,
    locked      boolean default false not null,
    ordering    integer               not null
);

create table event.attendees
(
    event_id      integer not null
        references event.events
            on update cascade on delete cascade,
    user_id       integer not null
        references people.users
            on update cascade on delete cascade,
    attend_status text    not null,
    primary key (event_id, user_id)
);

create table event.projects
(
    project_id  integer generated by default as identity
        primary key,
    name        text                     not null,
    description text                     not null,
    status      text                     not null,
    start_date  timestamp with time zone not null,
    end_date    timestamp with time zone not null
);

-- +goose Down

DROP SCHEMA event CASCADE;