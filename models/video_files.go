// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// VideoFile is an object representing the database table.
type VideoFile struct {
	VideoID           int         `boil:"video_id" json:"video_id" toml:"video_id" yaml:"video_id"`
	VideoFileTypeName string      `boil:"video_file_type_name" json:"video_file_type_name" toml:"video_file_type_name" yaml:"video_file_type_name"`
	Filename          string      `boil:"filename" json:"filename" toml:"filename" yaml:"filename"`
	IsEnabled         bool        `boil:"is_enabled" json:"is_enabled" toml:"is_enabled" yaml:"is_enabled"`
	Comments          null.String `boil:"comments" json:"comments,omitempty" toml:"comments" yaml:"comments,omitempty"`
	ID                int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Size              null.Int64  `boil:"size" json:"size,omitempty" toml:"size" yaml:"size,omitempty"`

	R *videoFileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L videoFileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VideoFileColumns = struct {
	VideoID           string
	VideoFileTypeName string
	Filename          string
	IsEnabled         string
	Comments          string
	ID                string
	Size              string
}{
	VideoID:           "video_id",
	VideoFileTypeName: "video_file_type_name",
	Filename:          "filename",
	IsEnabled:         "is_enabled",
	Comments:          "comments",
	ID:                "id",
	Size:              "size",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var VideoFileWhere = struct {
	VideoID           whereHelperint
	VideoFileTypeName whereHelperstring
	Filename          whereHelperstring
	IsEnabled         whereHelperbool
	Comments          whereHelpernull_String
	ID                whereHelperint
	Size              whereHelpernull_Int64
}{
	VideoID:           whereHelperint{field: "\"video_files\".\"video_id\""},
	VideoFileTypeName: whereHelperstring{field: "\"video_files\".\"video_file_type_name\""},
	Filename:          whereHelperstring{field: "\"video_files\".\"filename\""},
	IsEnabled:         whereHelperbool{field: "\"video_files\".\"is_enabled\""},
	Comments:          whereHelpernull_String{field: "\"video_files\".\"comments\""},
	ID:                whereHelperint{field: "\"video_files\".\"id\""},
	Size:              whereHelpernull_Int64{field: "\"video_files\".\"size\""},
}

// VideoFileRels is where relationship names are stored.
var VideoFileRels = struct {
	Video string
}{
	Video: "Video",
}

// videoFileR is where relationships are stored.
type videoFileR struct {
	Video *Video
}

// NewStruct creates a new relationship struct
func (*videoFileR) NewStruct() *videoFileR {
	return &videoFileR{}
}

// videoFileL is where Load methods for each relationship are stored.
type videoFileL struct{}

var (
	videoFileAllColumns            = []string{"video_id", "video_file_type_name", "filename", "is_enabled", "comments", "id", "size"}
	videoFileColumnsWithoutDefault = []string{"video_id", "video_file_type_name", "filename", "comments", "size"}
	videoFileColumnsWithDefault    = []string{"is_enabled", "id"}
	videoFilePrimaryKeyColumns     = []string{"id"}
)

type (
	// VideoFileSlice is an alias for a slice of pointers to VideoFile.
	// This should generally be used opposed to []VideoFile.
	VideoFileSlice []*VideoFile
	// VideoFileHook is the signature for custom VideoFile hook methods
	VideoFileHook func(context.Context, boil.ContextExecutor, *VideoFile) error

	videoFileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	videoFileType                 = reflect.TypeOf(&VideoFile{})
	videoFileMapping              = queries.MakeStructMapping(videoFileType)
	videoFilePrimaryKeyMapping, _ = queries.BindMapping(videoFileType, videoFileMapping, videoFilePrimaryKeyColumns)
	videoFileInsertCacheMut       sync.RWMutex
	videoFileInsertCache          = make(map[string]insertCache)
	videoFileUpdateCacheMut       sync.RWMutex
	videoFileUpdateCache          = make(map[string]updateCache)
	videoFileUpsertCacheMut       sync.RWMutex
	videoFileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var videoFileBeforeInsertHooks []VideoFileHook
var videoFileBeforeUpdateHooks []VideoFileHook
var videoFileBeforeDeleteHooks []VideoFileHook
var videoFileBeforeUpsertHooks []VideoFileHook

var videoFileAfterInsertHooks []VideoFileHook
var videoFileAfterSelectHooks []VideoFileHook
var videoFileAfterUpdateHooks []VideoFileHook
var videoFileAfterDeleteHooks []VideoFileHook
var videoFileAfterUpsertHooks []VideoFileHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VideoFile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoFileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VideoFile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoFileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VideoFile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoFileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VideoFile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoFileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VideoFile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoFileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VideoFile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoFileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VideoFile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoFileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VideoFile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoFileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VideoFile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoFileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVideoFileHook registers your hook function for all future operations.
func AddVideoFileHook(hookPoint boil.HookPoint, videoFileHook VideoFileHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		videoFileBeforeInsertHooks = append(videoFileBeforeInsertHooks, videoFileHook)
	case boil.BeforeUpdateHook:
		videoFileBeforeUpdateHooks = append(videoFileBeforeUpdateHooks, videoFileHook)
	case boil.BeforeDeleteHook:
		videoFileBeforeDeleteHooks = append(videoFileBeforeDeleteHooks, videoFileHook)
	case boil.BeforeUpsertHook:
		videoFileBeforeUpsertHooks = append(videoFileBeforeUpsertHooks, videoFileHook)
	case boil.AfterInsertHook:
		videoFileAfterInsertHooks = append(videoFileAfterInsertHooks, videoFileHook)
	case boil.AfterSelectHook:
		videoFileAfterSelectHooks = append(videoFileAfterSelectHooks, videoFileHook)
	case boil.AfterUpdateHook:
		videoFileAfterUpdateHooks = append(videoFileAfterUpdateHooks, videoFileHook)
	case boil.AfterDeleteHook:
		videoFileAfterDeleteHooks = append(videoFileAfterDeleteHooks, videoFileHook)
	case boil.AfterUpsertHook:
		videoFileAfterUpsertHooks = append(videoFileAfterUpsertHooks, videoFileHook)
	}
}

// One returns a single videoFile record from the query.
func (q videoFileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VideoFile, error) {
	o := &VideoFile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for video_files")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VideoFile records from the query.
func (q videoFileQuery) All(ctx context.Context, exec boil.ContextExecutor) (VideoFileSlice, error) {
	var o []*VideoFile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VideoFile slice")
	}

	if len(videoFileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VideoFile records in the query.
func (q videoFileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count video_files rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q videoFileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if video_files exists")
	}

	return count > 0, nil
}

// Video pointed to by the foreign key.
func (o *VideoFile) Video(mods ...qm.QueryMod) videoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VideoID),
	}

	queryMods = append(queryMods, mods...)

	query := Videos(queryMods...)
	queries.SetFrom(query.Query, "\"videos\"")

	return query
}

// LoadVideo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (videoFileL) LoadVideo(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVideoFile interface{}, mods queries.Applicator) error {
	var slice []*VideoFile
	var object *VideoFile

	if singular {
		object = maybeVideoFile.(*VideoFile)
	} else {
		slice = *maybeVideoFile.(*[]*VideoFile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &videoFileR{}
		}
		args = append(args, object.VideoID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &videoFileR{}
			}

			for _, a := range args {
				if a == obj.VideoID {
					continue Outer
				}
			}

			args = append(args, obj.VideoID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`videos`), qm.WhereIn(`videos.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Video")
	}

	var resultSlice []*Video
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Video")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for videos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for videos")
	}

	if len(videoFileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Video = foreign
		if foreign.R == nil {
			foreign.R = &videoR{}
		}
		foreign.R.VideoFiles = append(foreign.R.VideoFiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VideoID == foreign.ID {
				local.R.Video = foreign
				if foreign.R == nil {
					foreign.R = &videoR{}
				}
				foreign.R.VideoFiles = append(foreign.R.VideoFiles, local)
				break
			}
		}
	}

	return nil
}

// SetVideo of the videoFile to the related item.
// Sets o.R.Video to related.
// Adds o to related.R.VideoFiles.
func (o *VideoFile) SetVideo(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Video) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"video_files\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"video_id"}),
		strmangle.WhereClause("\"", "\"", 2, videoFilePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VideoID = related.ID
	if o.R == nil {
		o.R = &videoFileR{
			Video: related,
		}
	} else {
		o.R.Video = related
	}

	if related.R == nil {
		related.R = &videoR{
			VideoFiles: VideoFileSlice{o},
		}
	} else {
		related.R.VideoFiles = append(related.R.VideoFiles, o)
	}

	return nil
}

// VideoFiles retrieves all the records using an executor.
func VideoFiles(mods ...qm.QueryMod) videoFileQuery {
	mods = append(mods, qm.From("\"video_files\""))
	return videoFileQuery{NewQuery(mods...)}
}

// FindVideoFile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVideoFile(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*VideoFile, error) {
	videoFileObj := &VideoFile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"video_files\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, videoFileObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from video_files")
	}

	return videoFileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VideoFile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no video_files provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(videoFileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	videoFileInsertCacheMut.RLock()
	cache, cached := videoFileInsertCache[key]
	videoFileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			videoFileAllColumns,
			videoFileColumnsWithDefault,
			videoFileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(videoFileType, videoFileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(videoFileType, videoFileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"video_files\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"video_files\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into video_files")
	}

	if !cached {
		videoFileInsertCacheMut.Lock()
		videoFileInsertCache[key] = cache
		videoFileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VideoFile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VideoFile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	videoFileUpdateCacheMut.RLock()
	cache, cached := videoFileUpdateCache[key]
	videoFileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			videoFileAllColumns,
			videoFilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update video_files, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"video_files\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, videoFilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(videoFileType, videoFileMapping, append(wl, videoFilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update video_files row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for video_files")
	}

	if !cached {
		videoFileUpdateCacheMut.Lock()
		videoFileUpdateCache[key] = cache
		videoFileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q videoFileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for video_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for video_files")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VideoFileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), videoFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"video_files\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, videoFilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in videoFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all videoFile")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VideoFile) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no video_files provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(videoFileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	videoFileUpsertCacheMut.RLock()
	cache, cached := videoFileUpsertCache[key]
	videoFileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			videoFileAllColumns,
			videoFileColumnsWithDefault,
			videoFileColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			videoFileAllColumns,
			videoFilePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert video_files, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(videoFilePrimaryKeyColumns))
			copy(conflict, videoFilePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"video_files\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(videoFileType, videoFileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(videoFileType, videoFileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert video_files")
	}

	if !cached {
		videoFileUpsertCacheMut.Lock()
		videoFileUpsertCache[key] = cache
		videoFileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VideoFile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VideoFile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VideoFile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), videoFilePrimaryKeyMapping)
	sql := "DELETE FROM \"video_files\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from video_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for video_files")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q videoFileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no videoFileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from video_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for video_files")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VideoFileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(videoFileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), videoFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"video_files\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, videoFilePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from videoFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for video_files")
	}

	if len(videoFileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VideoFile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVideoFile(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VideoFileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VideoFileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), videoFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"video_files\".* FROM \"video_files\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, videoFilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VideoFileSlice")
	}

	*o = slice

	return nil
}

// VideoFileExists checks if the VideoFile row exists.
func VideoFileExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"video_files\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if video_files exists")
	}

	return exists, nil
}
