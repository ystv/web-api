// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// VideoBox is an object representing the database table.
type VideoBox struct {
	ID                      int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	LeftValue               int16       `boil:"left_value" json:"left_value" toml:"left_value" yaml:"left_value"`
	RightValue              int16       `boil:"right_value" json:"right_value" toml:"right_value" yaml:"right_value"`
	URLName                 string      `boil:"url_name" json:"url_name" toml:"url_name" yaml:"url_name"`
	DisplayName             null.String `boil:"display_name" json:"display_name,omitempty" toml:"display_name" yaml:"display_name,omitempty"`
	UseInURL                bool        `boil:"use_in_url" json:"use_in_url" toml:"use_in_url" yaml:"use_in_url"`
	Description             null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Image                   null.String `boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`
	IsEnabled               bool        `boil:"is_enabled" json:"is_enabled" toml:"is_enabled" yaml:"is_enabled"`
	IsPublic                bool        `boil:"is_public" json:"is_public" toml:"is_public" yaml:"is_public"`
	OrderingType            string      `boil:"ordering_type" json:"ordering_type" toml:"ordering_type" yaml:"ordering_type"`
	IsProduction            bool        `boil:"is_production" json:"is_production" toml:"is_production" yaml:"is_production"`
	Name                    null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	OrderingTypeBoxes       string      `boil:"ordering_type_boxes" json:"ordering_type_boxes" toml:"ordering_type_boxes" yaml:"ordering_type_boxes"`
	IsVisibleInLatestVideos bool        `boil:"is_visible_in_latest_videos" json:"is_visible_in_latest_videos" toml:"is_visible_in_latest_videos" yaml:"is_visible_in_latest_videos"`

	R *videoBoxR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L videoBoxL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VideoBoxColumns = struct {
	ID                      string
	LeftValue               string
	RightValue              string
	URLName                 string
	DisplayName             string
	UseInURL                string
	Description             string
	Image                   string
	IsEnabled               string
	IsPublic                string
	OrderingType            string
	IsProduction            string
	Name                    string
	OrderingTypeBoxes       string
	IsVisibleInLatestVideos string
}{
	ID:                      "id",
	LeftValue:               "left_value",
	RightValue:              "right_value",
	URLName:                 "url_name",
	DisplayName:             "display_name",
	UseInURL:                "use_in_url",
	Description:             "description",
	Image:                   "image",
	IsEnabled:               "is_enabled",
	IsPublic:                "is_public",
	OrderingType:            "ordering_type",
	IsProduction:            "is_production",
	Name:                    "name",
	OrderingTypeBoxes:       "ordering_type_boxes",
	IsVisibleInLatestVideos: "is_visible_in_latest_videos",
}

// Generated where

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var VideoBoxWhere = struct {
	ID                      whereHelperint
	LeftValue               whereHelperint16
	RightValue              whereHelperint16
	URLName                 whereHelperstring
	DisplayName             whereHelpernull_String
	UseInURL                whereHelperbool
	Description             whereHelpernull_String
	Image                   whereHelpernull_String
	IsEnabled               whereHelperbool
	IsPublic                whereHelperbool
	OrderingType            whereHelperstring
	IsProduction            whereHelperbool
	Name                    whereHelpernull_String
	OrderingTypeBoxes       whereHelperstring
	IsVisibleInLatestVideos whereHelperbool
}{
	ID:                      whereHelperint{field: "\"video_boxes\".\"id\""},
	LeftValue:               whereHelperint16{field: "\"video_boxes\".\"left_value\""},
	RightValue:              whereHelperint16{field: "\"video_boxes\".\"right_value\""},
	URLName:                 whereHelperstring{field: "\"video_boxes\".\"url_name\""},
	DisplayName:             whereHelpernull_String{field: "\"video_boxes\".\"display_name\""},
	UseInURL:                whereHelperbool{field: "\"video_boxes\".\"use_in_url\""},
	Description:             whereHelpernull_String{field: "\"video_boxes\".\"description\""},
	Image:                   whereHelpernull_String{field: "\"video_boxes\".\"image\""},
	IsEnabled:               whereHelperbool{field: "\"video_boxes\".\"is_enabled\""},
	IsPublic:                whereHelperbool{field: "\"video_boxes\".\"is_public\""},
	OrderingType:            whereHelperstring{field: "\"video_boxes\".\"ordering_type\""},
	IsProduction:            whereHelperbool{field: "\"video_boxes\".\"is_production\""},
	Name:                    whereHelpernull_String{field: "\"video_boxes\".\"name\""},
	OrderingTypeBoxes:       whereHelperstring{field: "\"video_boxes\".\"ordering_type_boxes\""},
	IsVisibleInLatestVideos: whereHelperbool{field: "\"video_boxes\".\"is_visible_in_latest_videos\""},
}

// VideoBoxRels is where relationship names are stored.
var VideoBoxRels = struct {
	Videos string
}{
	Videos: "Videos",
}

// videoBoxR is where relationships are stored.
type videoBoxR struct {
	Videos VideoSlice
}

// NewStruct creates a new relationship struct
func (*videoBoxR) NewStruct() *videoBoxR {
	return &videoBoxR{}
}

// videoBoxL is where Load methods for each relationship are stored.
type videoBoxL struct{}

var (
	videoBoxAllColumns            = []string{"id", "left_value", "right_value", "url_name", "display_name", "use_in_url", "description", "image", "is_enabled", "is_public", "ordering_type", "is_production", "name", "ordering_type_boxes", "is_visible_in_latest_videos"}
	videoBoxColumnsWithoutDefault = []string{"left_value", "right_value", "url_name", "display_name", "description", "image", "ordering_type", "name", "ordering_type_boxes"}
	videoBoxColumnsWithDefault    = []string{"id", "use_in_url", "is_enabled", "is_public", "is_production", "is_visible_in_latest_videos"}
	videoBoxPrimaryKeyColumns     = []string{"id"}
)

type (
	// VideoBoxSlice is an alias for a slice of pointers to VideoBox.
	// This should generally be used opposed to []VideoBox.
	VideoBoxSlice []*VideoBox
	// VideoBoxHook is the signature for custom VideoBox hook methods
	VideoBoxHook func(context.Context, boil.ContextExecutor, *VideoBox) error

	videoBoxQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	videoBoxType                 = reflect.TypeOf(&VideoBox{})
	videoBoxMapping              = queries.MakeStructMapping(videoBoxType)
	videoBoxPrimaryKeyMapping, _ = queries.BindMapping(videoBoxType, videoBoxMapping, videoBoxPrimaryKeyColumns)
	videoBoxInsertCacheMut       sync.RWMutex
	videoBoxInsertCache          = make(map[string]insertCache)
	videoBoxUpdateCacheMut       sync.RWMutex
	videoBoxUpdateCache          = make(map[string]updateCache)
	videoBoxUpsertCacheMut       sync.RWMutex
	videoBoxUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var videoBoxBeforeInsertHooks []VideoBoxHook
var videoBoxBeforeUpdateHooks []VideoBoxHook
var videoBoxBeforeDeleteHooks []VideoBoxHook
var videoBoxBeforeUpsertHooks []VideoBoxHook

var videoBoxAfterInsertHooks []VideoBoxHook
var videoBoxAfterSelectHooks []VideoBoxHook
var videoBoxAfterUpdateHooks []VideoBoxHook
var videoBoxAfterDeleteHooks []VideoBoxHook
var videoBoxAfterUpsertHooks []VideoBoxHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VideoBox) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoBoxBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VideoBox) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoBoxBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VideoBox) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoBoxBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VideoBox) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoBoxBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VideoBox) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoBoxAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VideoBox) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoBoxAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VideoBox) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoBoxAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VideoBox) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoBoxAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VideoBox) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoBoxAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVideoBoxHook registers your hook function for all future operations.
func AddVideoBoxHook(hookPoint boil.HookPoint, videoBoxHook VideoBoxHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		videoBoxBeforeInsertHooks = append(videoBoxBeforeInsertHooks, videoBoxHook)
	case boil.BeforeUpdateHook:
		videoBoxBeforeUpdateHooks = append(videoBoxBeforeUpdateHooks, videoBoxHook)
	case boil.BeforeDeleteHook:
		videoBoxBeforeDeleteHooks = append(videoBoxBeforeDeleteHooks, videoBoxHook)
	case boil.BeforeUpsertHook:
		videoBoxBeforeUpsertHooks = append(videoBoxBeforeUpsertHooks, videoBoxHook)
	case boil.AfterInsertHook:
		videoBoxAfterInsertHooks = append(videoBoxAfterInsertHooks, videoBoxHook)
	case boil.AfterSelectHook:
		videoBoxAfterSelectHooks = append(videoBoxAfterSelectHooks, videoBoxHook)
	case boil.AfterUpdateHook:
		videoBoxAfterUpdateHooks = append(videoBoxAfterUpdateHooks, videoBoxHook)
	case boil.AfterDeleteHook:
		videoBoxAfterDeleteHooks = append(videoBoxAfterDeleteHooks, videoBoxHook)
	case boil.AfterUpsertHook:
		videoBoxAfterUpsertHooks = append(videoBoxAfterUpsertHooks, videoBoxHook)
	}
}

// One returns a single videoBox record from the query.
func (q videoBoxQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VideoBox, error) {
	o := &VideoBox{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for video_boxes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VideoBox records from the query.
func (q videoBoxQuery) All(ctx context.Context, exec boil.ContextExecutor) (VideoBoxSlice, error) {
	var o []*VideoBox

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VideoBox slice")
	}

	if len(videoBoxAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VideoBox records in the query.
func (q videoBoxQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count video_boxes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q videoBoxQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if video_boxes exists")
	}

	return count > 0, nil
}

// Videos retrieves all the video's Videos with an executor.
func (o *VideoBox) Videos(mods ...qm.QueryMod) videoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"videos\".\"video_box_id\"=?", o.ID),
	)

	query := Videos(queryMods...)
	queries.SetFrom(query.Query, "\"videos\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"videos\".*"})
	}

	return query
}

// LoadVideos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (videoBoxL) LoadVideos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVideoBox interface{}, mods queries.Applicator) error {
	var slice []*VideoBox
	var object *VideoBox

	if singular {
		object = maybeVideoBox.(*VideoBox)
	} else {
		slice = *maybeVideoBox.(*[]*VideoBox)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &videoBoxR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &videoBoxR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`videos`), qm.WhereIn(`videos.video_box_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load videos")
	}

	var resultSlice []*Video
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice videos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on videos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for videos")
	}

	if len(videoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Videos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &videoR{}
			}
			foreign.R.VideoBox = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VideoBoxID {
				local.R.Videos = append(local.R.Videos, foreign)
				if foreign.R == nil {
					foreign.R = &videoR{}
				}
				foreign.R.VideoBox = local
				break
			}
		}
	}

	return nil
}

// AddVideos adds the given related objects to the existing relationships
// of the video_box, optionally inserting them as new records.
// Appends related to o.R.Videos.
// Sets related.R.VideoBox appropriately.
func (o *VideoBox) AddVideos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Video) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VideoBoxID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"videos\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"video_box_id"}),
				strmangle.WhereClause("\"", "\"", 2, videoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VideoBoxID = o.ID
		}
	}

	if o.R == nil {
		o.R = &videoBoxR{
			Videos: related,
		}
	} else {
		o.R.Videos = append(o.R.Videos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &videoR{
				VideoBox: o,
			}
		} else {
			rel.R.VideoBox = o
		}
	}
	return nil
}

// VideoBoxes retrieves all the records using an executor.
func VideoBoxes(mods ...qm.QueryMod) videoBoxQuery {
	mods = append(mods, qm.From("\"video_boxes\""))
	return videoBoxQuery{NewQuery(mods...)}
}

// FindVideoBox retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVideoBox(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*VideoBox, error) {
	videoBoxObj := &VideoBox{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"video_boxes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, videoBoxObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from video_boxes")
	}

	return videoBoxObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VideoBox) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no video_boxes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(videoBoxColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	videoBoxInsertCacheMut.RLock()
	cache, cached := videoBoxInsertCache[key]
	videoBoxInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			videoBoxAllColumns,
			videoBoxColumnsWithDefault,
			videoBoxColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(videoBoxType, videoBoxMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(videoBoxType, videoBoxMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"video_boxes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"video_boxes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into video_boxes")
	}

	if !cached {
		videoBoxInsertCacheMut.Lock()
		videoBoxInsertCache[key] = cache
		videoBoxInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VideoBox.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VideoBox) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	videoBoxUpdateCacheMut.RLock()
	cache, cached := videoBoxUpdateCache[key]
	videoBoxUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			videoBoxAllColumns,
			videoBoxPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update video_boxes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"video_boxes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, videoBoxPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(videoBoxType, videoBoxMapping, append(wl, videoBoxPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update video_boxes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for video_boxes")
	}

	if !cached {
		videoBoxUpdateCacheMut.Lock()
		videoBoxUpdateCache[key] = cache
		videoBoxUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q videoBoxQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for video_boxes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for video_boxes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VideoBoxSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), videoBoxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"video_boxes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, videoBoxPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in videoBox slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all videoBox")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VideoBox) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no video_boxes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(videoBoxColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	videoBoxUpsertCacheMut.RLock()
	cache, cached := videoBoxUpsertCache[key]
	videoBoxUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			videoBoxAllColumns,
			videoBoxColumnsWithDefault,
			videoBoxColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			videoBoxAllColumns,
			videoBoxPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert video_boxes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(videoBoxPrimaryKeyColumns))
			copy(conflict, videoBoxPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"video_boxes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(videoBoxType, videoBoxMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(videoBoxType, videoBoxMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert video_boxes")
	}

	if !cached {
		videoBoxUpsertCacheMut.Lock()
		videoBoxUpsertCache[key] = cache
		videoBoxUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VideoBox record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VideoBox) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VideoBox provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), videoBoxPrimaryKeyMapping)
	sql := "DELETE FROM \"video_boxes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from video_boxes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for video_boxes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q videoBoxQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no videoBoxQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from video_boxes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for video_boxes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VideoBoxSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(videoBoxBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), videoBoxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"video_boxes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, videoBoxPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from videoBox slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for video_boxes")
	}

	if len(videoBoxAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VideoBox) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVideoBox(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VideoBoxSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VideoBoxSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), videoBoxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"video_boxes\".* FROM \"video_boxes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, videoBoxPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VideoBoxSlice")
	}

	*o = slice

	return nil
}

// VideoBoxExists checks if the VideoBox row exists.
func VideoBoxExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"video_boxes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if video_boxes exists")
	}

	return exists, nil
}
