// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Video is an object representing the database table.
type Video struct {
	ID              int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	VideoBoxID      int         `boil:"video_box_id" json:"video_box_id" toml:"video_box_id" yaml:"video_box_id"`
	DisplayName     null.String `boil:"display_name" json:"display_name,omitempty" toml:"display_name" yaml:"display_name,omitempty"`
	URLName         string      `boil:"url_name" json:"url_name" toml:"url_name" yaml:"url_name"`
	Description     null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Ordering        null.Int16  `boil:"ordering" json:"ordering,omitempty" toml:"ordering" yaml:"ordering,omitempty"`
	Duration        null.String `boil:"duration" json:"duration,omitempty" toml:"duration" yaml:"duration,omitempty"`
	CreatedDate     time.Time   `boil:"created_date" json:"created_date" toml:"created_date" yaml:"created_date"`
	CreatedBy       null.Int    `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	IsEnabled       bool        `boil:"is_enabled" json:"is_enabled" toml:"is_enabled" yaml:"is_enabled"`
	SearchIndexData null.String `boil:"search_index_data" json:"search_index_data,omitempty" toml:"search_index_data" yaml:"search_index_data,omitempty"`
	Keywords        null.String `boil:"keywords" json:"keywords,omitempty" toml:"keywords" yaml:"keywords,omitempty"`
	RedirectID      null.Int    `boil:"redirect_id" json:"redirect_id,omitempty" toml:"redirect_id" yaml:"redirect_id,omitempty"`

	R *videoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L videoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VideoColumns = struct {
	ID              string
	VideoBoxID      string
	DisplayName     string
	URLName         string
	Description     string
	Ordering        string
	Duration        string
	CreatedDate     string
	CreatedBy       string
	IsEnabled       string
	SearchIndexData string
	Keywords        string
	RedirectID      string
}{
	ID:              "id",
	VideoBoxID:      "video_box_id",
	DisplayName:     "display_name",
	URLName:         "url_name",
	Description:     "description",
	Ordering:        "ordering",
	Duration:        "duration",
	CreatedDate:     "created_date",
	CreatedBy:       "created_by",
	IsEnabled:       "is_enabled",
	SearchIndexData: "search_index_data",
	Keywords:        "keywords",
	RedirectID:      "redirect_id",
}

// Generated where

type whereHelpernull_Int16 struct{ field string }

func (w whereHelpernull_Int16) EQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int16) NEQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int16) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int16) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int16) LT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int16) LTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int16) GT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int16) GTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var VideoWhere = struct {
	ID              whereHelperint
	VideoBoxID      whereHelperint
	DisplayName     whereHelpernull_String
	URLName         whereHelperstring
	Description     whereHelpernull_String
	Ordering        whereHelpernull_Int16
	Duration        whereHelpernull_String
	CreatedDate     whereHelpertime_Time
	CreatedBy       whereHelpernull_Int
	IsEnabled       whereHelperbool
	SearchIndexData whereHelpernull_String
	Keywords        whereHelpernull_String
	RedirectID      whereHelpernull_Int
}{
	ID:              whereHelperint{field: "\"videos\".\"id\""},
	VideoBoxID:      whereHelperint{field: "\"videos\".\"video_box_id\""},
	DisplayName:     whereHelpernull_String{field: "\"videos\".\"display_name\""},
	URLName:         whereHelperstring{field: "\"videos\".\"url_name\""},
	Description:     whereHelpernull_String{field: "\"videos\".\"description\""},
	Ordering:        whereHelpernull_Int16{field: "\"videos\".\"ordering\""},
	Duration:        whereHelpernull_String{field: "\"videos\".\"duration\""},
	CreatedDate:     whereHelpertime_Time{field: "\"videos\".\"created_date\""},
	CreatedBy:       whereHelpernull_Int{field: "\"videos\".\"created_by\""},
	IsEnabled:       whereHelperbool{field: "\"videos\".\"is_enabled\""},
	SearchIndexData: whereHelpernull_String{field: "\"videos\".\"search_index_data\""},
	Keywords:        whereHelpernull_String{field: "\"videos\".\"keywords\""},
	RedirectID:      whereHelpernull_Int{field: "\"videos\".\"redirect_id\""},
}

// VideoRels is where relationship names are stored.
var VideoRels = struct {
	Redirect       string
	VideoBox       string
	VideoFiles     string
	RedirectVideos string
}{
	Redirect:       "Redirect",
	VideoBox:       "VideoBox",
	VideoFiles:     "VideoFiles",
	RedirectVideos: "RedirectVideos",
}

// videoR is where relationships are stored.
type videoR struct {
	Redirect       *Video
	VideoBox       *VideoBox
	VideoFiles     VideoFileSlice
	RedirectVideos VideoSlice
}

// NewStruct creates a new relationship struct
func (*videoR) NewStruct() *videoR {
	return &videoR{}
}

// videoL is where Load methods for each relationship are stored.
type videoL struct{}

var (
	videoAllColumns            = []string{"id", "video_box_id", "display_name", "url_name", "description", "ordering", "duration", "created_date", "created_by", "is_enabled", "search_index_data", "keywords", "redirect_id"}
	videoColumnsWithoutDefault = []string{"video_box_id", "display_name", "url_name", "description", "ordering", "duration", "created_date", "created_by", "search_index_data", "keywords", "redirect_id"}
	videoColumnsWithDefault    = []string{"id", "is_enabled"}
	videoPrimaryKeyColumns     = []string{"id"}
)

type (
	// VideoSlice is an alias for a slice of pointers to Video.
	// This should generally be used opposed to []Video.
	VideoSlice []*Video
	// VideoHook is the signature for custom Video hook methods
	VideoHook func(context.Context, boil.ContextExecutor, *Video) error

	videoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	videoType                 = reflect.TypeOf(&Video{})
	videoMapping              = queries.MakeStructMapping(videoType)
	videoPrimaryKeyMapping, _ = queries.BindMapping(videoType, videoMapping, videoPrimaryKeyColumns)
	videoInsertCacheMut       sync.RWMutex
	videoInsertCache          = make(map[string]insertCache)
	videoUpdateCacheMut       sync.RWMutex
	videoUpdateCache          = make(map[string]updateCache)
	videoUpsertCacheMut       sync.RWMutex
	videoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var videoBeforeInsertHooks []VideoHook
var videoBeforeUpdateHooks []VideoHook
var videoBeforeDeleteHooks []VideoHook
var videoBeforeUpsertHooks []VideoHook

var videoAfterInsertHooks []VideoHook
var videoAfterSelectHooks []VideoHook
var videoAfterUpdateHooks []VideoHook
var videoAfterDeleteHooks []VideoHook
var videoAfterUpsertHooks []VideoHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Video) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Video) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Video) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Video) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Video) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Video) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Video) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Video) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Video) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVideoHook registers your hook function for all future operations.
func AddVideoHook(hookPoint boil.HookPoint, videoHook VideoHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		videoBeforeInsertHooks = append(videoBeforeInsertHooks, videoHook)
	case boil.BeforeUpdateHook:
		videoBeforeUpdateHooks = append(videoBeforeUpdateHooks, videoHook)
	case boil.BeforeDeleteHook:
		videoBeforeDeleteHooks = append(videoBeforeDeleteHooks, videoHook)
	case boil.BeforeUpsertHook:
		videoBeforeUpsertHooks = append(videoBeforeUpsertHooks, videoHook)
	case boil.AfterInsertHook:
		videoAfterInsertHooks = append(videoAfterInsertHooks, videoHook)
	case boil.AfterSelectHook:
		videoAfterSelectHooks = append(videoAfterSelectHooks, videoHook)
	case boil.AfterUpdateHook:
		videoAfterUpdateHooks = append(videoAfterUpdateHooks, videoHook)
	case boil.AfterDeleteHook:
		videoAfterDeleteHooks = append(videoAfterDeleteHooks, videoHook)
	case boil.AfterUpsertHook:
		videoAfterUpsertHooks = append(videoAfterUpsertHooks, videoHook)
	}
}

// One returns a single video record from the query.
func (q videoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Video, error) {
	o := &Video{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for videos")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Video records from the query.
func (q videoQuery) All(ctx context.Context, exec boil.ContextExecutor) (VideoSlice, error) {
	var o []*Video

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Video slice")
	}

	if len(videoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Video records in the query.
func (q videoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count videos rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q videoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if videos exists")
	}

	return count > 0, nil
}

// Redirect pointed to by the foreign key.
func (o *Video) Redirect(mods ...qm.QueryMod) videoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RedirectID),
	}

	queryMods = append(queryMods, mods...)

	query := Videos(queryMods...)
	queries.SetFrom(query.Query, "\"videos\"")

	return query
}

// VideoBox pointed to by the foreign key.
func (o *Video) VideoBox(mods ...qm.QueryMod) videoBoxQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VideoBoxID),
	}

	queryMods = append(queryMods, mods...)

	query := VideoBoxes(queryMods...)
	queries.SetFrom(query.Query, "\"video_boxes\"")

	return query
}

// VideoFiles retrieves all the video_file's VideoFiles with an executor.
func (o *Video) VideoFiles(mods ...qm.QueryMod) videoFileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"video_files\".\"video_id\"=?", o.ID),
	)

	query := VideoFiles(queryMods...)
	queries.SetFrom(query.Query, "\"video_files\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"video_files\".*"})
	}

	return query
}

// RedirectVideos retrieves all the video's Videos with an executor via redirect_id column.
func (o *Video) RedirectVideos(mods ...qm.QueryMod) videoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"videos\".\"redirect_id\"=?", o.ID),
	)

	query := Videos(queryMods...)
	queries.SetFrom(query.Query, "\"videos\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"videos\".*"})
	}

	return query
}

// LoadRedirect allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (videoL) LoadRedirect(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVideo interface{}, mods queries.Applicator) error {
	var slice []*Video
	var object *Video

	if singular {
		object = maybeVideo.(*Video)
	} else {
		slice = *maybeVideo.(*[]*Video)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &videoR{}
		}
		if !queries.IsNil(object.RedirectID) {
			args = append(args, object.RedirectID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &videoR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RedirectID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RedirectID) {
				args = append(args, obj.RedirectID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`videos`), qm.WhereIn(`videos.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Video")
	}

	var resultSlice []*Video
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Video")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for videos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for videos")
	}

	if len(videoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Redirect = foreign
		if foreign.R == nil {
			foreign.R = &videoR{}
		}
		foreign.R.RedirectVideos = append(foreign.R.RedirectVideos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RedirectID, foreign.ID) {
				local.R.Redirect = foreign
				if foreign.R == nil {
					foreign.R = &videoR{}
				}
				foreign.R.RedirectVideos = append(foreign.R.RedirectVideos, local)
				break
			}
		}
	}

	return nil
}

// LoadVideoBox allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (videoL) LoadVideoBox(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVideo interface{}, mods queries.Applicator) error {
	var slice []*Video
	var object *Video

	if singular {
		object = maybeVideo.(*Video)
	} else {
		slice = *maybeVideo.(*[]*Video)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &videoR{}
		}
		args = append(args, object.VideoBoxID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &videoR{}
			}

			for _, a := range args {
				if a == obj.VideoBoxID {
					continue Outer
				}
			}

			args = append(args, obj.VideoBoxID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`video_boxes`), qm.WhereIn(`video_boxes.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VideoBox")
	}

	var resultSlice []*VideoBox
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VideoBox")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for video_boxes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for video_boxes")
	}

	if len(videoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VideoBox = foreign
		if foreign.R == nil {
			foreign.R = &videoBoxR{}
		}
		foreign.R.Videos = append(foreign.R.Videos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VideoBoxID == foreign.ID {
				local.R.VideoBox = foreign
				if foreign.R == nil {
					foreign.R = &videoBoxR{}
				}
				foreign.R.Videos = append(foreign.R.Videos, local)
				break
			}
		}
	}

	return nil
}

// LoadVideoFiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (videoL) LoadVideoFiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVideo interface{}, mods queries.Applicator) error {
	var slice []*Video
	var object *Video

	if singular {
		object = maybeVideo.(*Video)
	} else {
		slice = *maybeVideo.(*[]*Video)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &videoR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &videoR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`video_files`), qm.WhereIn(`video_files.video_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load video_files")
	}

	var resultSlice []*VideoFile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice video_files")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on video_files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for video_files")
	}

	if len(videoFileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VideoFiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &videoFileR{}
			}
			foreign.R.Video = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VideoID {
				local.R.VideoFiles = append(local.R.VideoFiles, foreign)
				if foreign.R == nil {
					foreign.R = &videoFileR{}
				}
				foreign.R.Video = local
				break
			}
		}
	}

	return nil
}

// LoadRedirectVideos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (videoL) LoadRedirectVideos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVideo interface{}, mods queries.Applicator) error {
	var slice []*Video
	var object *Video

	if singular {
		object = maybeVideo.(*Video)
	} else {
		slice = *maybeVideo.(*[]*Video)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &videoR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &videoR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`videos`), qm.WhereIn(`videos.redirect_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load videos")
	}

	var resultSlice []*Video
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice videos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on videos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for videos")
	}

	if len(videoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RedirectVideos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &videoR{}
			}
			foreign.R.Redirect = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RedirectID) {
				local.R.RedirectVideos = append(local.R.RedirectVideos, foreign)
				if foreign.R == nil {
					foreign.R = &videoR{}
				}
				foreign.R.Redirect = local
				break
			}
		}
	}

	return nil
}

// SetRedirect of the video to the related item.
// Sets o.R.Redirect to related.
// Adds o to related.R.RedirectVideos.
func (o *Video) SetRedirect(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Video) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"videos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"redirect_id"}),
		strmangle.WhereClause("\"", "\"", 2, videoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RedirectID, related.ID)
	if o.R == nil {
		o.R = &videoR{
			Redirect: related,
		}
	} else {
		o.R.Redirect = related
	}

	if related.R == nil {
		related.R = &videoR{
			RedirectVideos: VideoSlice{o},
		}
	} else {
		related.R.RedirectVideos = append(related.R.RedirectVideos, o)
	}

	return nil
}

// RemoveRedirect relationship.
// Sets o.R.Redirect to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Video) RemoveRedirect(ctx context.Context, exec boil.ContextExecutor, related *Video) error {
	var err error

	queries.SetScanner(&o.RedirectID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("redirect_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Redirect = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RedirectVideos {
		if queries.Equal(o.RedirectID, ri.RedirectID) {
			continue
		}

		ln := len(related.R.RedirectVideos)
		if ln > 1 && i < ln-1 {
			related.R.RedirectVideos[i] = related.R.RedirectVideos[ln-1]
		}
		related.R.RedirectVideos = related.R.RedirectVideos[:ln-1]
		break
	}
	return nil
}

// SetVideoBox of the video to the related item.
// Sets o.R.VideoBox to related.
// Adds o to related.R.Videos.
func (o *Video) SetVideoBox(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VideoBox) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"videos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"video_box_id"}),
		strmangle.WhereClause("\"", "\"", 2, videoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VideoBoxID = related.ID
	if o.R == nil {
		o.R = &videoR{
			VideoBox: related,
		}
	} else {
		o.R.VideoBox = related
	}

	if related.R == nil {
		related.R = &videoBoxR{
			Videos: VideoSlice{o},
		}
	} else {
		related.R.Videos = append(related.R.Videos, o)
	}

	return nil
}

// AddVideoFiles adds the given related objects to the existing relationships
// of the video, optionally inserting them as new records.
// Appends related to o.R.VideoFiles.
// Sets related.R.Video appropriately.
func (o *Video) AddVideoFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VideoFile) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VideoID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"video_files\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"video_id"}),
				strmangle.WhereClause("\"", "\"", 2, videoFilePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VideoID = o.ID
		}
	}

	if o.R == nil {
		o.R = &videoR{
			VideoFiles: related,
		}
	} else {
		o.R.VideoFiles = append(o.R.VideoFiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &videoFileR{
				Video: o,
			}
		} else {
			rel.R.Video = o
		}
	}
	return nil
}

// AddRedirectVideos adds the given related objects to the existing relationships
// of the video, optionally inserting them as new records.
// Appends related to o.R.RedirectVideos.
// Sets related.R.Redirect appropriately.
func (o *Video) AddRedirectVideos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Video) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RedirectID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"videos\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"redirect_id"}),
				strmangle.WhereClause("\"", "\"", 2, videoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RedirectID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &videoR{
			RedirectVideos: related,
		}
	} else {
		o.R.RedirectVideos = append(o.R.RedirectVideos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &videoR{
				Redirect: o,
			}
		} else {
			rel.R.Redirect = o
		}
	}
	return nil
}

// SetRedirectVideos removes all previously related items of the
// video replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Redirect's RedirectVideos accordingly.
// Replaces o.R.RedirectVideos with related.
// Sets related.R.Redirect's RedirectVideos accordingly.
func (o *Video) SetRedirectVideos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Video) error {
	query := "update \"videos\" set \"redirect_id\" = null where \"redirect_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RedirectVideos {
			queries.SetScanner(&rel.RedirectID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Redirect = nil
		}

		o.R.RedirectVideos = nil
	}
	return o.AddRedirectVideos(ctx, exec, insert, related...)
}

// RemoveRedirectVideos relationships from objects passed in.
// Removes related items from R.RedirectVideos (uses pointer comparison, removal does not keep order)
// Sets related.R.Redirect.
func (o *Video) RemoveRedirectVideos(ctx context.Context, exec boil.ContextExecutor, related ...*Video) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RedirectID, nil)
		if rel.R != nil {
			rel.R.Redirect = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("redirect_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RedirectVideos {
			if rel != ri {
				continue
			}

			ln := len(o.R.RedirectVideos)
			if ln > 1 && i < ln-1 {
				o.R.RedirectVideos[i] = o.R.RedirectVideos[ln-1]
			}
			o.R.RedirectVideos = o.R.RedirectVideos[:ln-1]
			break
		}
	}

	return nil
}

// Videos retrieves all the records using an executor.
func Videos(mods ...qm.QueryMod) videoQuery {
	mods = append(mods, qm.From("\"videos\""))
	return videoQuery{NewQuery(mods...)}
}

// FindVideo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVideo(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Video, error) {
	videoObj := &Video{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"videos\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, videoObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from videos")
	}

	return videoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Video) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no videos provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(videoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	videoInsertCacheMut.RLock()
	cache, cached := videoInsertCache[key]
	videoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			videoAllColumns,
			videoColumnsWithDefault,
			videoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(videoType, videoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(videoType, videoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"videos\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"videos\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into videos")
	}

	if !cached {
		videoInsertCacheMut.Lock()
		videoInsertCache[key] = cache
		videoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Video.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Video) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	videoUpdateCacheMut.RLock()
	cache, cached := videoUpdateCache[key]
	videoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			videoAllColumns,
			videoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update videos, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"videos\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, videoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(videoType, videoMapping, append(wl, videoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update videos row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for videos")
	}

	if !cached {
		videoUpdateCacheMut.Lock()
		videoUpdateCache[key] = cache
		videoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q videoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for videos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for videos")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VideoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), videoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"videos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, videoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in video slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all video")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Video) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no videos provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(videoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	videoUpsertCacheMut.RLock()
	cache, cached := videoUpsertCache[key]
	videoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			videoAllColumns,
			videoColumnsWithDefault,
			videoColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			videoAllColumns,
			videoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert videos, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(videoPrimaryKeyColumns))
			copy(conflict, videoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"videos\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(videoType, videoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(videoType, videoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert videos")
	}

	if !cached {
		videoUpsertCacheMut.Lock()
		videoUpsertCache[key] = cache
		videoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Video record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Video) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Video provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), videoPrimaryKeyMapping)
	sql := "DELETE FROM \"videos\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from videos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for videos")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q videoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no videoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from videos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for videos")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VideoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(videoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), videoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"videos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, videoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from video slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for videos")
	}

	if len(videoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Video) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVideo(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VideoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VideoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), videoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"videos\".* FROM \"videos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, videoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VideoSlice")
	}

	*o = slice

	return nil
}

// VideoExists checks if the Video row exists.
func VideoExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"videos\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if videos exists")
	}

	return exists, nil
}
