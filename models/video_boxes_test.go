// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVideoBoxes(t *testing.T) {
	t.Parallel()

	query := VideoBoxes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVideoBoxesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VideoBox{}
	if err = randomize.Struct(seed, o, videoBoxDBTypes, true, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VideoBoxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVideoBoxesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VideoBox{}
	if err = randomize.Struct(seed, o, videoBoxDBTypes, true, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := VideoBoxes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VideoBoxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVideoBoxesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VideoBox{}
	if err = randomize.Struct(seed, o, videoBoxDBTypes, true, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VideoBoxSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VideoBoxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVideoBoxesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VideoBox{}
	if err = randomize.Struct(seed, o, videoBoxDBTypes, true, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VideoBoxExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if VideoBox exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VideoBoxExists to return true, but got false.")
	}
}

func testVideoBoxesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VideoBox{}
	if err = randomize.Struct(seed, o, videoBoxDBTypes, true, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	videoBoxFound, err := FindVideoBox(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if videoBoxFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVideoBoxesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VideoBox{}
	if err = randomize.Struct(seed, o, videoBoxDBTypes, true, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = VideoBoxes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVideoBoxesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VideoBox{}
	if err = randomize.Struct(seed, o, videoBoxDBTypes, true, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := VideoBoxes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVideoBoxesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	videoBoxOne := &VideoBox{}
	videoBoxTwo := &VideoBox{}
	if err = randomize.Struct(seed, videoBoxOne, videoBoxDBTypes, false, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}
	if err = randomize.Struct(seed, videoBoxTwo, videoBoxDBTypes, false, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = videoBoxOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = videoBoxTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VideoBoxes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVideoBoxesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	videoBoxOne := &VideoBox{}
	videoBoxTwo := &VideoBox{}
	if err = randomize.Struct(seed, videoBoxOne, videoBoxDBTypes, false, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}
	if err = randomize.Struct(seed, videoBoxTwo, videoBoxDBTypes, false, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = videoBoxOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = videoBoxTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VideoBoxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func videoBoxBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *VideoBox) error {
	*o = VideoBox{}
	return nil
}

func videoBoxAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *VideoBox) error {
	*o = VideoBox{}
	return nil
}

func videoBoxAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *VideoBox) error {
	*o = VideoBox{}
	return nil
}

func videoBoxBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VideoBox) error {
	*o = VideoBox{}
	return nil
}

func videoBoxAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VideoBox) error {
	*o = VideoBox{}
	return nil
}

func videoBoxBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VideoBox) error {
	*o = VideoBox{}
	return nil
}

func videoBoxAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VideoBox) error {
	*o = VideoBox{}
	return nil
}

func videoBoxBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VideoBox) error {
	*o = VideoBox{}
	return nil
}

func videoBoxAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VideoBox) error {
	*o = VideoBox{}
	return nil
}

func testVideoBoxesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &VideoBox{}
	o := &VideoBox{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, videoBoxDBTypes, false); err != nil {
		t.Errorf("Unable to randomize VideoBox object: %s", err)
	}

	AddVideoBoxHook(boil.BeforeInsertHook, videoBoxBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	videoBoxBeforeInsertHooks = []VideoBoxHook{}

	AddVideoBoxHook(boil.AfterInsertHook, videoBoxAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	videoBoxAfterInsertHooks = []VideoBoxHook{}

	AddVideoBoxHook(boil.AfterSelectHook, videoBoxAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	videoBoxAfterSelectHooks = []VideoBoxHook{}

	AddVideoBoxHook(boil.BeforeUpdateHook, videoBoxBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	videoBoxBeforeUpdateHooks = []VideoBoxHook{}

	AddVideoBoxHook(boil.AfterUpdateHook, videoBoxAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	videoBoxAfterUpdateHooks = []VideoBoxHook{}

	AddVideoBoxHook(boil.BeforeDeleteHook, videoBoxBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	videoBoxBeforeDeleteHooks = []VideoBoxHook{}

	AddVideoBoxHook(boil.AfterDeleteHook, videoBoxAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	videoBoxAfterDeleteHooks = []VideoBoxHook{}

	AddVideoBoxHook(boil.BeforeUpsertHook, videoBoxBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	videoBoxBeforeUpsertHooks = []VideoBoxHook{}

	AddVideoBoxHook(boil.AfterUpsertHook, videoBoxAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	videoBoxAfterUpsertHooks = []VideoBoxHook{}
}

func testVideoBoxesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VideoBox{}
	if err = randomize.Struct(seed, o, videoBoxDBTypes, true, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VideoBoxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVideoBoxesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VideoBox{}
	if err = randomize.Struct(seed, o, videoBoxDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(videoBoxColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := VideoBoxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVideoBoxToManyVideos(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VideoBox
	var b, c Video

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, videoBoxDBTypes, true, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, videoDBTypes, false, videoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, videoDBTypes, false, videoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.VideoBoxID = a.ID
	c.VideoBoxID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Videos().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.VideoBoxID == b.VideoBoxID {
			bFound = true
		}
		if v.VideoBoxID == c.VideoBoxID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VideoBoxSlice{&a}
	if err = a.L.LoadVideos(ctx, tx, false, (*[]*VideoBox)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Videos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Videos = nil
	if err = a.L.LoadVideos(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Videos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testVideoBoxToManyAddOpVideos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VideoBox
	var b, c, d, e Video

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, videoBoxDBTypes, false, strmangle.SetComplement(videoBoxPrimaryKeyColumns, videoBoxColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Video{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, videoDBTypes, false, strmangle.SetComplement(videoPrimaryKeyColumns, videoColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Video{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVideos(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.VideoBoxID {
			t.Error("foreign key was wrong value", a.ID, first.VideoBoxID)
		}
		if a.ID != second.VideoBoxID {
			t.Error("foreign key was wrong value", a.ID, second.VideoBoxID)
		}

		if first.R.VideoBox != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.VideoBox != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Videos[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Videos[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Videos().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testVideoBoxesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VideoBox{}
	if err = randomize.Struct(seed, o, videoBoxDBTypes, true, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVideoBoxesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VideoBox{}
	if err = randomize.Struct(seed, o, videoBoxDBTypes, true, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VideoBoxSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVideoBoxesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VideoBox{}
	if err = randomize.Struct(seed, o, videoBoxDBTypes, true, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VideoBoxes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	videoBoxDBTypes = map[string]string{`ID`: `integer`, `LeftValue`: `smallint`, `RightValue`: `smallint`, `URLName`: `character varying`, `DisplayName`: `character varying`, `UseInURL`: `boolean`, `Description`: `text`, `Image`: `character varying`, `IsEnabled`: `boolean`, `IsPublic`: `boolean`, `OrderingType`: `enum.box_ordering('alphabetical','reverse_alphabetical','custom','added')`, `IsProduction`: `boolean`, `Name`: `character varying`, `OrderingTypeBoxes`: `enum.box_ordering('alphabetical','reverse_alphabetical','custom','added')`, `IsVisibleInLatestVideos`: `boolean`}
	_               = bytes.MinRead
)

func testVideoBoxesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(videoBoxPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(videoBoxAllColumns) == len(videoBoxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VideoBox{}
	if err = randomize.Struct(seed, o, videoBoxDBTypes, true, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VideoBoxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, videoBoxDBTypes, true, videoBoxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVideoBoxesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(videoBoxAllColumns) == len(videoBoxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VideoBox{}
	if err = randomize.Struct(seed, o, videoBoxDBTypes, true, videoBoxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VideoBoxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, videoBoxDBTypes, true, videoBoxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(videoBoxAllColumns, videoBoxPrimaryKeyColumns) {
		fields = videoBoxAllColumns
	} else {
		fields = strmangle.SetComplement(
			videoBoxAllColumns,
			videoBoxPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VideoBoxSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVideoBoxesUpsert(t *testing.T) {
	t.Parallel()

	if len(videoBoxAllColumns) == len(videoBoxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := VideoBox{}
	if err = randomize.Struct(seed, &o, videoBoxDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VideoBox: %s", err)
	}

	count, err := VideoBoxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, videoBoxDBTypes, false, videoBoxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VideoBox struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VideoBox: %s", err)
	}

	count, err = VideoBoxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
