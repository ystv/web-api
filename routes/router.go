package routes

import (
	"fmt"
	"net/http"
	"os"
	"strconv"
	"time"

	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/jmoiron/sqlx"
	"github.com/labstack/echo/v4"
	echoMw "github.com/labstack/echo/v4/middleware"
	clapperPackage "github.com/ystv/web-api/controllers/v1/clapper"
	creatorPackage "github.com/ystv/web-api/controllers/v1/creator"
	encoderV1 "github.com/ystv/web-api/controllers/v1/encoder"
	miscPackage "github.com/ystv/web-api/controllers/v1/misc"
	peopleV1 "github.com/ystv/web-api/controllers/v1/people"
	publicPackage "github.com/ystv/web-api/controllers/v1/public"
	streamV1 "github.com/ystv/web-api/controllers/v1/stream"
	_ "github.com/ystv/web-api/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/ystv/web-api/middleware"
	"github.com/ystv/web-api/utils"

	echoSwagger "github.com/swaggo/echo-swagger"
)

// TODO standarise on function names

// Init initialise routes
// @title web-api
// @description The backend powering most things
// @contact.url https://github.com/ystv/web-api
func Init(version, commit string, db *sqlx.DB, cdn *s3.S3) *echo.Echo {
	e := echo.New()
	e.HideBanner = true
	debug, err := strconv.ParseBool(os.Getenv("debug"))
	if err != nil {
		panic(err)
	}
	// Enabling debugging
	e.Debug = debug

	creatorV1 := creatorPackage.NewRepos(db, cdn)
	miscV1 := miscPackage.NewRepo(db)
	publicV1 := publicPackage.NewRepos(db)
	clapperV1 := clapperPackage.NewRepos(db)

	// Authentication middleware
	middleware.Init(e)
	config := echoMw.JWTConfig{
		Claims:      &utils.JWTClaims{},
		TokenLookup: "cookie:token",
		SigningKey:  []byte(os.Getenv("signing_key")),
	}

	// swagger
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	// List all possible routes
	e.GET("/routes", func(c echo.Context) error {
		return c.JSON(http.StatusOK, e.Routes())
	})
	// ping
	e.GET("/ping", func(c echo.Context) error {
		resp := map[string]time.Time{"pong": time.Now()}
		return c.JSON(http.StatusOK, resp)
	})

	apiV1 := e.Group("v1")
	{
		internal := apiV1.Group("/internal")
		// Service web endpoints
		encoder := internal.Group("/encoder")
		{
			encoder.POST("/upload_request", encoderV1.VideoNew)
		}
		stream := internal.Group("/stream")
		{
			stream.POST("/auth", streamV1.CheckAuth)
		}
		// Internal user endpoints
		if !debug {
			internal.Use(echoMw.JWTWithConfig(config))
		}
		{
			people := internal.Group("/people")
			{
				people.GET("/user/full", peopleV1.UserByTokenFull)
				people.GET("/user/:id", peopleV1.UserByID)
				people.GET("/user/:id/full", peopleV1.UserByIDFull)
				people.GET("/user", peopleV1.UserByToken)
			}
			creator := internal.Group("/creator")
			{
				videos := creator.Group("/videos")
				{
					videos.GET("", creatorV1.VideoList)
					videos.GET("/my", creatorV1.VideosUser)
					videos.POST("", creatorV1.VideoNew)
					videoItem := videos.Group("/:id")
					{
						videoItem.GET("", creatorV1.VideoFind)
						videoItem.PUT("", notImplemented)
					}
				}
				series := creator.Group("/series")
				{
					series.GET("", creatorV1.ListSeries)
					series.GET("/:id", creatorV1.GetSeries)
				}
				playlists := creator.Group("/playlists")
				{
					playlists.GET("", creatorV1.PlaylistAll)
					playlists.POST("", creatorV1.PlaylistNew)
					playlist := playlists.Group("/:id")
					{
						playlist.GET("", creatorV1.PlaylistGet)
						playlist.PUT("", creatorV1.PlaylistUpdate)
					}
				}
				encodes := creator.Group("/encodes")
				{
					presets := encodes.Group("/presets")
					{
						presets.GET("", creatorV1.PresetList)
						presets.POST("", creatorV1.PresetNew)
						presets.PUT("", creatorV1.PresetUpdate) // We take the ID in the json request
					}
					profiles := encodes.Group("/profiles")
					{
						profiles.GET("", creatorV1.EncodeProfileList)
					}
				}
				creator.GET("/calendar/:year/:month", creatorV1.CalendarList)
				creator.GET("/stats", creatorPackage.Stats)
			}
			clapper := internal.Group("/clapper")
			{
				calendar := clapper.Group("/calendar")
				{
					// calendar.GET("/:year/:term", notImplemented)       // List all events of term
					calendar.GET("/:year/:month", clapperV1.MonthList) // List all events of month
				}
				events := clapper.Group("/event")
				{
					event := events.Group("/:eventid")
					{
						event.GET("", clapperV1.EventGet) // Get event info, returns event info and signup sheets
						signup := event.Group("/signup")
						{
							signup.GET("/:id", notImplemented)          // Get a signup sheet, likely not to be used
							signup.POST("", clapperV1.SignupNew)        // Create a new signup sheet
							signup.PUT("/:sheet/:role", notImplemented) // Update a crew role, used to set a person
						}
					}
					events.POST("", clapperV1.EventNew)   // Create a new event
					events.PUT("", clapperV1.EventUpdate) // Update an event

				}
				crew := clapper.Group("/position")
				{
					crew.GET("", clapperV1.PositionList)   // List crew positions
					crew.POST("", clapperV1.PositionNew)   // Create a new crew position
					crew.PUT("", clapperV1.PositionUpdate) // Update a position
				}
			}
			misc := internal.Group("/misc")
			{
				quote := misc.Group("/quote")
				{
					quote.GET("/:amount/:page", miscV1.ListQuotes)
					quote.POST("", miscV1.NewQuote)
					quote.PUT("", miscV1.UpdateQuote)
					quote.DELETE("/:id", miscV1.DeleteQuote)
				}
			}
		}
		public := apiV1.Group("/public")
		{
			public.GET("/find/*", publicV1.Find)
			public.GET("/videos/:offset/:page", publicV1.ListVideos)
			public.GET("/video/:id", publicV1.Video)
			public.GET("/video/:id/breadcrumb", publicV1.VideoBreadcrumb)
			public.GET("/series/:id", publicV1.SeriesByID)
			public.GET("/series/:id/breadcrumb", publicV1.SeriesBreadcrumb)
			public.GET("/teams", publicV1.ListTeams)
			public.GET("/streams", publicPackage.StreamList)
			public.GET("/stream/:id", publicPackage.StreamFind)
			public.GET("/streams/home", publicPackage.StreamHome) // isLive null
		}

	}
	e.GET("/", func(c echo.Context) error {
		text := fmt.Sprintf(`                                                                                
                                                              @@@@@             
                                                                     @@@@       
                                                                         @@@    
                                               @@@@                        @@@@ 
                                               @@@@                          @@@
        .    @@@@@         @@@@   @@@@@@     @@@@@@@@@  @@@@        @@@@     @@@
     @@       @@@@@       @@@@  @@@@@@@@@@   @@@@@@@@@   @@@@      @@@@       @@
   @@           @@@@    @@@@@   @@@@           @@@@       @@@@    @@@@       @@ 
  @@             @@@@  @@@@@     @@@@@@@@      @@@@        @@@@  @@@@       @@  
 @@               @@@@@@@@           @@@@@@    @@@@         @@@@@@@@      @@    
 @@@               @@@@@@       @@@    @@@@    @@@@          @@@@@@     @       
 @@@                @@@@        @@@@@@@@@@     @@@@           @@@@              
  (@@@             @@@@                                                         
     @@@         @@@@@          web-api                                         
        @@@@    @@@@@           Version: %s                                     
              @@@@@             Commit ID: %s                                                
`, version, commit)
		return c.String(http.StatusOK, text)
	})
	return e
}

func notImplemented(c echo.Context) error {
	return c.NoContent(http.StatusNotImplemented)
}
